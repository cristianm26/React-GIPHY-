{"version":3,"sources":["Components/AddCategoria.js","Components/GifGridItem.js","helpers/getGifs.js","Components/GifGrid.js","hooks/useFetchGifs.js","Components/GifExpertApp.js","App.js","reportWebVitals.js","index.js"],"names":["AddCategoria","setCategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","categoria","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","imagenes","GifExpertApp","categorias","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAGaA,EAAe,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAa7C,OACI,sBAAMC,SATU,SAACC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACrCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAhBc,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,QCJjBG,EAAc,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACjC,OACI,sBAAKC,UAAU,0CAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QATvB,kBAaZY,GAbY,4CAAH,sDCIPM,EAAU,SAAC,GAAmB,IAAjBb,EAAgB,EAAhBA,UAAgB,ECFd,SAACA,GAAe,IAAD,EACbpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAmBvC,OAdAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GAEEH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAK1B,CAACd,IAGGe,EDf0BK,CAAapB,GAAjCqB,EAFyB,EAE/Bf,KAAgBQ,EAFe,EAEfA,QACvB,OACI,qCACI,oBAAIlB,UAAU,qCAAd,SAAoDI,IACnDc,GAAW,mBAAGlB,UAAU,oCAAb,sBACX,qBAAKA,UAAU,YAAf,SAEOyB,EAASb,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEVjCY,EAAe,WAAO,IAAD,EAEM1C,mBAAS,CAAC,cAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAO9B,OACI,qCACA,gDACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBAEA,6BAEQ4C,EAAWf,KAAI,SAACR,GAAD,OACZ,cAAC,EAAD,CAEKA,UAAWA,GADNA,YCbdwB,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.622a626f.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategoria = ({setCategorias}) => {\r\n   const [inputValue, setinputValue] = useState('');\r\n    const handleInputChange = (e)=>{\r\n       setinputValue(e.target.value)\r\n    }\r\n    const handleSubmit =(e)=>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length> 2) {\r\n            setCategorias(cats=> [inputValue ,...cats ])\r\n            setinputValue('');\r\n        }\r\n       \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategoria.propTypes ={\r\n    setCategorias: PropTypes.func.isRequired\r\n}","import React from 'react'\r\nimport '../index.css'\r\nexport const GifGridItem = ({ title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn \">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async (categoria) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=2UeBD1ebDiNT8Gnlpup7AbSkou11Wgus`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport '../index.css';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nexport const GifGrid = ({ categoria }) => {\r\n\r\n    const {data: imagenes, loading}= useFetchGifs(categoria);\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn \">{categoria}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash \">Cargando</p>}\r\n             <div className=\"card-grid\">\r\n                {\r\n                    imagenes.map(img => (\r\n                        <GifGridItem key={img.id} {...img} />\r\n                    ))\r\n                }\r\n            </div> \r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\nexport const useFetchGifs = (categoria) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    useEffect(() => {\r\n        getGifs(categoria)\r\n            .then(imgs =>{\r\n               \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n    \r\n              \r\n            })\r\n    }, [categoria])\r\n\r\n\r\n    return state;\r\n}\r\n","import React,{useState} from 'react'\r\nimport { AddCategoria } from './AddCategoria';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n   \r\n    const [categorias, setCategorias] = useState(['One Punch']);\r\n  /*   const handleAdd=()=>{\r\n        setCategorias(cats=> [...cats, 'HunterXHunter' ])\r\n    } */\r\n\r\n    return (\r\n        <>\r\n        <h2>Gif Expert App</h2>\r\n        <AddCategoria setCategorias={setCategorias}/>\r\n        <hr/>\r\n        \r\n        <ol>\r\n            {\r\n                categorias.map((categoria)=> \r\n                   <GifGrid \r\n                        key={categoria}\r\n                        categoria={categoria}  \r\n                    />\r\n                )\r\n            }\r\n        </ol>\r\n        \r\n        </>\r\n    )\r\n}\r\n","import { GifExpertApp } from \"./Components/GifExpertApp\";\n\nfunction App() {\n  return (\n    <GifExpertApp />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}